<?xml version="1.0" encoding="UTF-8"?><testrun name="TVPlanTest" project="TVPackage" tests="24" started="24" failures="9" errors="0" ignored="0">
  <testsuite name="sqa.main.TVPlanTest" time="0.0" displayname="TVPlanTest" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]">
    <testsuite name="testPricePerMonth(sqa.main.TVPlanTest)" time="0.0" displayname="testPricePerMonth(String, boolean, boolean, boolean, double)" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]">
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[1] STANDARD, false, false, false, 150" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#1]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[2] STANDARD, false, false, true, 100" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#2]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.003" dynamicTest="true" displayname="[3] STANDARD, false, true, false, 250" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#3]">
        <failure>
          <expected>250.0</expected>
          <actual>150.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;250.0&gt; but was: &lt;150.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[4] STANDARD, false, true, true, 200" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#4]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[5] STANDARD, true, false, false, 250" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#5]">
        <failure>
          <expected>250.0</expected>
          <actual>150.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;250.0&gt; but was: &lt;150.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[6] STANDARD, true, false, true, 200" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#6]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.002" dynamicTest="true" displayname="[7] STANDARD, true, true, false, 350" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#7]">
        <failure>
          <expected>350.0</expected>
          <actual>150.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;350.0&gt; but was: &lt;150.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[8] STANDARD, true, true, true, 300" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#8]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[9] PREMIUM, false, false, false, 350" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#9]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[10] PREMIUM, false, false, true, 300" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#10]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.002" dynamicTest="true" displayname="[11] PREMIUM, false, true, false, 450" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#11]">
        <failure>
          <expected>450.0</expected>
          <actual>350.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;450.0&gt; but was: &lt;350.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[12] PREMIUM, false, true, true, 400" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#12]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.002" dynamicTest="true" displayname="[13] PREMIUM, true, false, false, 450" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#13]">
        <failure>
          <expected>450.0</expected>
          <actual>350.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;450.0&gt; but was: &lt;350.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[14] PREMIUM, true, false, true, 400" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#14]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[15] PREMIUM, true, true, false, 550" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#15]">
        <failure>
          <expected>550.0</expected>
          <actual>350.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;550.0&gt; but was: &lt;350.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[16] PREMIUM, true, true, true, 500" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#16]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[17] FAMILY, false, false, false, 450" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#17]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[18] FAMILY, false, false, true, 400" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#18]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[19] FAMILY, false, true, false, 550" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#19]">
        <failure>
          <expected>550.0</expected>
          <actual>450.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;550.0&gt; but was: &lt;450.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[20] FAMILY, false, true, true, 500" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#20]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.001" dynamicTest="true" displayname="[21] FAMILY, true, false, false, 550" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#21]">
        <failure>
          <expected>550.0</expected>
          <actual>450.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;550.0&gt; but was: &lt;450.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[22] FAMILY, true, false, true, 500" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#22]"/>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[23] FAMILY, true, true, false, 650" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#23]">
        <failure>
          <expected>650.0</expected>
          <actual>450.0</actual>
          org.opentest4j.AssertionFailedError: expected: &lt;650.0&gt; but was: &lt;450.0&gt;
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:70)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:65)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:889)
	at sqa.main.TVPlanTest.testPricePerMonth(TVPlanTest.java:42)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.Optional.ifPresent(Optional.java:178)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.stream.ReferencePipeline$7$1FlatMap.accept(ReferencePipeline.java:294)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:215)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:570)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:560)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:636)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)


        </failure>
      </testcase>
      <testcase name="testPricePerMonth" classname="sqa.main.TVPlanTest" time="0.0" dynamicTest="true" displayname="[24] FAMILY, true, true, true, 600" parameters="java.lang.String,boolean,boolean,boolean,double" uniqueid="[engine:junit-jupiter]/[class:sqa.main.TVPlanTest]/[test-template:testPricePerMonth(java.lang.String, boolean, boolean, boolean, double)]/[test-template-invocation:#24]"/>
    </testsuite>
  </testsuite>
</testrun>
