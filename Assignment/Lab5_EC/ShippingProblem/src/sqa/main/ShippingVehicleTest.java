package sqa.main;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;

class ShippingVehicleTest {

    @ParameterizedTest
    @CsvSource({
    	// ค่าทั้งหมดเป็นลบ
        "-1,-1,-1,'-1'",
     // แทนกล่องใหญ่ด้วยกล่องเล็ก
        "5,0,0,'5,0,0'",      // 5 กล่องเล็ก = 10 กก.

     // แทนกล่องใหญ่ด้วยกล่องกลาง
        "0,2,0,'0,2,0'",      // 2 กล่องกลาง = 10 กก.

     // ผสม: 1 กล่องกลาง + 2 กล่องเล็ก = 9 กก.
        "2,1,0,'2,1,0'",     // 1 กล่องกลาง, 2 กล่องเล็ก

     // จำนวนกล่องไม่พอสำหรับน้ำหนักที่ต้องการ
        "3,0,0,'3,0,0'",      // มีแค่ 3 กล่องเล็ก (6 กก.)

     // มีแค่ 3 กล่องเล็ก (6 กก.)
        "1,1,1,'1,1,1'",
     // ทุกค่าคือศูนย์
        "0,0,0,'0,0,0'",

     // มีแต่กล่องเล็ก
        "500,0,0,'-1'",      // เกินขีดจำกัด
        "499,0,0,'499,0,0'", // ต่ำกว่าขีดจำกัดเล็กน้อย

     // มีแต่กล่องกลาง
        "0,200,0,'-1'", // เกินขีดจำกัด
        "0,199,0,'0,199,0'", // ต่ำกว่าขีดจำกัดเล็กน้อย

     // มีแต่กล่องใหญ่
        "0,0,101,'-1'", // เกินขีดจำกัด
        "0,0,100,'0,0,100'", // ต่ำกว่าขีดจำกัดเล็กน้อย

     // ผสมกัน แต่ไม่เกินขีดจำกัด
        "10,10,10,'10,10,10'",
        "1,1,1,'1,1,1'",

     // ผสมกัน ที่ขีดจำกัดพอดี
        "50,100,50,'-1'",

     // ผสมกัน เกินขีดจำกัด
        "100,100,100,'-1'",

     // กรณีขอบ: จำนวนกล่องน้อยที่สุด
        "1,0,0,'1,0,0'",
        "0,1,0,'0,1,0'",
        "0,0,1,'0,0,1'",

     // ไม่สามารถบรรจุได้ (กล่องไม่พอ)
        "1,1,100,'-1'",
        "1,100,1,'-1'",
        "100,1,1,'-1'",

     // ค่าติดลบ (ไม่ควรเกิดขึ้น แต่ทดสอบความทนทาน)
        "100,50,50,'50,50,0'",

     // ค่าติดลบ (ไม่ควรเกิดขึ้น แต่ทดสอบความทนทาน)
        "-1,0,0,'-1'",
        "0,-1,0,'-1'",
        "0,0,-1,'-1'",
     // เกินขีดจำกัด: จำนวนกล่องรวมเกินขีดจำกัด (เช่น ขีดจำกัดคือ 499+199+100=798, 799 คือเกิน)
        "400,200,200,'-1'",    // 400+200+200=800 > 798

        //กรณีค่าติดลบและศูนย์/บวกผสมกัน
        "-1,0,1,'-1'",
        "0,-1,1,'-1'",
        "1,0,-1,'-1'",
        "0,1,-1,'-1'",
        "-5,10,0,'-1'",
        "10,-5,0,'-1'",
        "0,10,-5,'-1'",
        "-2,0,0,'-1'",
        "0,-2,0,'-1'",
        "0,0,-2,'-1'"
    })
    void testCalculate(int small, int medium, int large, String expectedStr) {
        ShippingVehicle vehicle = new ShippingVehicle();
        List<Integer> result = vehicle.calculate(small, medium, large);
        String actual = String.join(",", result.stream().map(String::valueOf).toArray(String[]::new));
        assertEquals(expectedStr, actual);
    }
}
